name: CI/CD Pipeline  # name of the GitHub Actions workflow

on:
  push:
    branches:
      - main  # Trigger the workflow when code is pushed to the main branch

jobs:
  build:
    runs-on: ubuntu-latest  # Specifies job to run on an Ubuntu runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Checks out the repo code

      - name: Install HTML Linter
        run: sudo apt-get install tidy -y  # Installs HTML linter (Tidy)

      - name: Lint HTML
        run: tidy -q -e index.html  # Runs the linter on index.html to check for errors

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my-nginx-app:latest .  # Builds Docker image for the Nginx app

        # Logs into DockerHub using stored credentials 
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin  
        
        # Pushes the Docker image to DockerHub repository
      - name: Push Docker Image to DockerHub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-nginx-app:latest  
        

  deploy:
    name: Deploy to AWS
    needs: build  # Ensures that deployment only runs after the build job is complete
    runs-on: ubuntu-latest  # Runs on an Ubuntu machine
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Checks out the repo code

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2  # Sets up Terraform

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS access key
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS secret key
          aws-region: ${{ secrets.AWS_REGION }}  # AWS region 

      - name: Terraform Init
        working-directory: terraform
        # Removes existing Terraform configurations
        # Initializes Terraform backend and providers
        run: |
          rm -rf .terraform .terraform.lock.hcl  
          terraform init  

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan  # Generates a plan for infrastructure changes

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve  # Deploys infrastructure changes automatically

      - name: Waiting for Deployment to Finish
        run: sleep 1000  # Waits to allow EC2 instance provisioning and setup

      - name: Grab Terraform Outputs
        working-directory: terraform
        run: |
          echo "EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV  
          echo "PRIVATE_KEY=$(terraform output -raw private_key_path)" >> $GITHUB_ENV  
        # Fetches the EC2 public IP and private key from Terraform outputs and stores them in environment variables

      - name: Setup SSH Key
      # Saves the private key to a file
      # Sets secure permissions for the private key
        run: |
          echo "${{ env.PRIVATE_KEY }}" > private_key.pem  
          chmod 600 private_key.pem  

      - name: Create Ansible Inventory
      # Creates an inventory file for Ansible with the EC2 instance details
        run: echo "${{ env.EC2_PUBLIC_IP }} ansible_user=${{ secrets.EC2_USER }}" > inventory  

      - name: Run Ansible Playbook on EC2
      # Executes the Ansible playbook to configure the EC2 instance
        run: ansible-playbook -i inventory --private-key private_key.pem playbook.yml  
        

      - name: Cleanup SSH Key
        run: rm -f private_key.pem inventory  # Removes sensitive SSH keys and inventory files after deployment
